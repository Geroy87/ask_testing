{
	"info": {
		"_postman_id": "445227ef-f154-4c51-8ce9-ed0076229cf0",
		"name": "ASK_HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25333018",
		"_collection_link": "https://dark-crescent-479369.postman.co/workspace/ASK_MAY23~e17e2aa6-dbae-4e0f-a7d3-04d1c900a04f/collection/25333018-445227ef-f154-4c51-8ce9-ed0076229cf0?action=share&creator=25333018&source=collection_link"
	},
	"item": [
		{
			"name": "POST/sign-up_[S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User was created\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User was created\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{studentEmail}}\",\n  \"name\": \"Andre Tester\",\n  \"password\": \"ABC123\",\n  \"group\": \"ABD\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/sign-up",
					"host": [
						"{{QA}}"
					],
					"path": [
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jasonData = pm.response.json();",
							"pm.environment.set(\"StudentID\",jasonData[0].id);",
							"pm.environment.set(\"activationCodeS\", jasonData[0].activationCode);",
							"",
							"pm.test(\"Verify role is STUDENT\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"STUDENT\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{studentEmail}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/activate_[S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Messague - User was activated\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User was activated\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{QA}}/activate/{{StudentID}}/{{activationCodeS}}",
					"host": [
						"{{QA}}"
					],
					"path": [
						"activate",
						"{{StudentID}}",
						"{{activationCodeS}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TEACHER/sign-in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jasonData = pm.response.json();",
							"pm.environment.set(\"Teacher_id\", jasonData.user.id);",
							"pm.environment.set(\"Teacher_token\", jasonData.token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Role: TEACHER, name: Andrii Skrypchenko \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user.name).to.eql('Andrii Skrypchenko');",
							"    pm.expect(jsonData.user.role).to.eql('TEACHER');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"ronlil@gmailos.com\",\n  \"password\": \"ABC123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/sign-in",
					"host": [
						"{{QA}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "STUDENT/sign-in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jasonData = pm.response.json();",
							"pm.environment.set(\"StudentID\", jasonData.user.id);",
							"pm.environment.set(\"Student_token\", jasonData.token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"",
							"pm.test(\"Role: STUDENT, name: Andre Tester\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user.name).to.eql('Andre Tester');",
							"    pm.expect(jsonData.user.role).to.eql('STUDENT');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{studentEmail}}\",\n  \"password\": \"ABC123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/sign-in",
					"host": [
						"{{QA}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "TEACHER/quiz_CREATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"QuizID\", jsonData.id);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Teacher_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"test_from_Andre\",\n  \"totalScore\": 18,\n  \"passingPercentage\": 75,\n  \"showStopperQuestion\": 1,\n  \"questions\": [\n    {\n      \"type\": \"TEXTUAL\",\n      \"question\": \"What is your name?\",\n      \"score\": 5\n    },\n    {\n      \"type\": \"SINGLE_CHOICE\",\n      \"question\": \"Which city is city largest in California?\",\n      \"score\": 7,\n      \"answer\": 2,\n      \"hasOtherOption\": false,\n      \"options\": [\n        \"San Francisco\",\n        \"Sacramento\",\n        \"Los Angeles\",\n        \"Redding\"\n      ]\n    },\n    {\n      \"type\": \"MULTIPLE_CHOICE\",\n      \"question\": \"Who was apple founded by?\",\n      \"score\": 6,\n      \"answers\": [\n        0,\n        1,\n        2\n      ],\n      \"hasOtherOption\": true,\n      \"options\": [\n        \"Steve Jobs\",\n        \"Steve Wozniak\",\n        \"Ronald Wayne\",\n        \"Ronald Reagan\"\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/quiz",
					"host": [
						"{{QA}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "TEACHER/quizzes_LIST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Quiz in LIST\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jsonData.length-1].id).to.eql(pm.environment.get(\"QuizID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Teacher_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/quizzes",
					"host": [
						"{{QA}}"
					],
					"path": [
						"quizzes"
					]
				}
			},
			"response": []
		},
		{
			"name": "TEACHER/assignment_NEW",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var jasonData = pm.response.json();",
							"pm.environment.set(\"Assigment_id\", jasonData[0].id);",
							"pm.environment.set(\"assignmentGroupID\", jasonData[0].assignmentGroupID);",
							"",
							"pm.test(\"Status: ASSIGNED, result: PENDING, gradedBy: NONE \", function () {",
							"        pm.expect(jasonData[0].status).to.eql(\"ASSIGNED\");",
							"        pm.expect(jasonData[0].result).to.eql(\"PENDING\");",
							"        pm.expect(jasonData[0].gradedBy).to.eql(\"NONE\");",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Teacher_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"quizId\": {{QuizID}},\n  \"userIds\": [{{StudentID}}]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/assignment",
					"host": [
						"{{QA}}"
					],
					"path": [
						"assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "STUDENT/my-assignments_LIST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status is ASSIGNED\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData[jsonData.length-1].status).to.eql(\"ASSIGNED\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Student_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/my-assignments",
					"host": [
						"{{QA}}"
					],
					"path": [
						"my-assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "STUDENT/assignment_SUBMIT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"pm.test(\"Assigment: SUBMITTED\", function () { ",
							"    pm.expect(jsonData [jsonData.length-1].status).to.eql('SUBMITTED');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Student_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"assignmentId\":{{Assigment_id}},\n    \"answers\": [\n        {\n            \"textAnswer\":\"Andre\",\n            \"answer\":null\n        },\n        {\n            \"textAnswer\":\"\",\n            \"answer\": 2\n        },\n        {\n            \"textAnswer\":\"\",\n            \"answer\":[\n                0,\n                1,\n                2\n                ]\n        }\n     ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/submit-assignment",
					"host": [
						"{{QA}}"
					],
					"path": [
						"submit-assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST/forgot-password_STUDENT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Massage - Reset password email was sent \", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Reset password email was sent\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{studentEmail}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/forgot-password",
					"host": [
						"{{QA}}"
					],
					"path": [
						"forgot-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/api/-forgot_password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"StudentID\",jsonData[jsonData.length-1].id);",
							"pm.environment.set(\"activationCodeS\", jsonData[jsonData.length-1].activationCode);",
							"",
							"pm.test(\"Verify role is STUDENT\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"STUDENT\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{studentEmail}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST/reset-password/{{StudentID}}/{{activationCodeS}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message - Password was changed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Password was changed\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"ABC12345\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{QA}}/reset-password/{{StudentID}}/{{activationCodeS}}",
					"host": [
						"{{QA}}"
					],
					"path": [
						"reset-password",
						"{{StudentID}}",
						"{{activationCodeS}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DEL/quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Quiz was deleted\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Quiz was deleted\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Teacher_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{QA}}/quiz/{{QuizID}}",
					"host": [
						"{{QA}}"
					],
					"path": [
						"quiz",
						"{{QuizID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DEL/assignment_GRP_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assignment was deleted\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Assignment was deleted\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Teacher_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{QA}}/assignment/{{assignmentGroupID}}",
					"host": [
						"{{QA}}"
					],
					"path": [
						"assignment",
						"{{assignmentGroupID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DEL/user/STUDENT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User role was updated\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User role was updated\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Teacher_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{QA}}/users/{{StudentID}}",
					"host": [
						"{{QA}}"
					],
					"path": [
						"users",
						"{{StudentID}}"
					]
				}
			},
			"response": []
		}
	]
}